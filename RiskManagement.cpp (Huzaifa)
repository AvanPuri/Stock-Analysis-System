#include "RiskManagement.h"
#include <algorithm>
#include <cmath>

using namespace std;  // Use the entire standard namespace

double RiskManagement::CalculateVaR(double* returns, int numReturns, double confidenceLevel) {
    sort(returns, returns + numReturns);  // std::sort
    int index = static_cast<int>(numReturns * (1 - confidenceLevel));
    return -returns[index];
}

double RiskManagement::CalculateDrawdown(double* returns, int numReturns) {
    double maxReturn = 0.0;
    double drawdown = 0.0;

    for (int i = 0; i < numReturns; ++i) {
        maxReturn = max(maxReturn, returns[i]);  // std::max
        drawdown = min(drawdown, returns[i] - maxReturn);  // std::min
    }

    return drawdown;
}

double RiskManagement::CalculateSharpeRatio(double* returns, int numReturns, double riskFreeRate) {
    double sumReturns = 0.0;
    for (int i = 0; i < numReturns; ++i) {
        sumReturns += returns[i];
    }
    double avgReturn = sumReturns / numReturns;

    double sumSquaredDiff = 0.0;
    for (int i = 0; i < numReturns; ++i) {
        sumSquaredDiff += pow(returns[i] - avgReturn, 2);  // std::pow
    }
    double variance = sumSquaredDiff / numReturns;
    double stdDeviation = sqrt(variance);  // std::sqrt

    double sharpeRatio = (avgReturn - riskFreeRate) / stdDeviation;
    return sharpeRatio;
}

